name: Validate Terraform, Run Tests, and Create Pull Request

on:
  pull_request:
    branches:
      - develop
    paths:
      - 'src/**'
      - 'tests/**'
      - 'infra/**'
      - '.github/config/variables-lambda.env'
      - '.github/workflows/lambdas-create-pr.yml'
      - '.github/workflows/lambdas-deploy.yml'

jobs:
  load-variables:
    runs-on: ubuntu-latest
    outputs:
      env-file: ${{ steps.load-env.outputs.env-file }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Load variables from .env file with expansion
        id: load-env
        uses: cardinalby/export-env-action@v1
        with:
          envFile: '.github/config/variables-lambda.env'
          expand: 'true'

      - name: Print Loaded Variables
        run: |
          echo "Loaded Variables:"
          env

  check-variables:
    runs-on: ubuntu-latest
    needs: load-variables
    steps:
      - name: Validate & Print Variables
        run: |
          echo "Validating and Printing Variables..."
          vars=("AWS_REGION" "TERRAFORM_DIRECTORY" "LAMBDA_RUNTIME" "LAMBDAS" "TEST_RUN_TOGGLE" "TEST_LAMBDAS" "COVERAGE_FAIL_UNDER")
          for var in "${vars[@]}"; do
            if [[ -z "${!var}" ]]; then
              echo "Error: $var is empty or not defined."
              exit 1
            else
              echo "$var: ${!var}"
            fi
          done

  terraform-validate:
    runs-on: ubuntu-latest
    needs: load-variables
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}

  run-tests:
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LAMBDA_RUNTIME }}

      - name: Install Dependencies
        run: |
          echo "Processing test lambdas configuration..."
          test_lambdas=$(echo "$TEST_LAMBDAS" | jq -c '.[]')
          for test_lambda in $test_lambdas; do
            name=$(echo $test_lambda | jq -r '.name')
            source=$(echo $test_lambda | jq -r '.source')
            echo "Processing $name in $source..."
            if [ -f "$source/requirements.txt" ]; then
              pip install -r "$source/requirements.txt"
            else
              echo "No requirements.txt found for $name"
            fi
          done

      - name: Run Tests and Generate Coverage
        run: |
          coverage run -m unittest discover -s tests
          coverage report -m --fail-under=$COVERAGE_FAIL_UNDER
          coverage html
          coverage-badge -o coverage.svg -f

  sync-develop-to-main:
    runs-on: ubuntu-latest
    needs: run-tests
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch and Checkout Branches
        run: |
          git fetch origin
          git checkout develop
          git pull origin develop
          git fetch origin ${{ github.event.pull_request.head.ref }}:${{ github.event.pull_request.head.ref }}

      - name: Merge PR to Develop
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git merge --no-ff ${{ github.event.pull_request.head.ref }}
          git push origin develop
        env:
          GITHUB_PAT: ${{ secrets.PAT }}

      - name: Create or Update Pull Request to Main
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const { data: existingPullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: 'develop',
              base: 'main',
              state: 'open'
            });

            if (existingPullRequests.length > 0) {
              const pullRequest = existingPullRequests[0];
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pullRequest.number,
                title: 'Sync develop to main',
                body: 'This is an automated PR to sync changes from develop to main.'
              });
              console.log(`Updated pull request: ${pullRequest.html_url}`);
            } else {
              const { data: pullRequest } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Sync develop to main',
                head: 'develop',
                base: 'main',
                body: 'This is an automated PR to sync changes from develop to main.',
                draft: false
              });
              console.log(`Created pull request: ${pullRequest.html_url}`);
            }