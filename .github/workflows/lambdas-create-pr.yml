name: Validate Terraform, Run Tests, and Create Pull Request

on:
  pull_request:
    branches:
      - develop
    paths:
      - 'src/**'
      - 'tests/**'
      - 'infra/**'
      - '.github/config/variables-lambda.yml'
      - '.github/workflows/lambdas-create-pr.yml'
      - '.github/workflows/lambdas-deploy.yml'

jobs:
  load-variables:
    runs-on: ubuntu-latest

    outputs:
      github-env-aws-region: ${{ steps.load-vars.outputs.github-env-aws-region }}
      github-env-aws-access-key: ${{ steps.set-secrets.outputs.github-env-aws-access-key }}
      github-env-aws-secret-key: ${{ steps.set-secrets.outputs.github-env-aws-secret-key }}
      github-env-github-token-pat: ${{ steps.set-secrets.outputs.github-env-github-token-pat }}
      terraform-directory: ${{ steps.load-vars.outputs.terraform-directory }}
      lambda-runtime: ${{ steps.load-vars.outputs.lambda-runtime }}
      lambdas: ${{ steps.load-vars.outputs.lambdas }}
      test-run-toggle: ${{ steps.load-vars.outputs.test-run-toggle }}
      test-lambdas: ${{ steps.load-vars.outputs.test-lambdas }}
      coverage-fail-under: ${{ steps.load-vars.outputs.coverage-fail-under }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Load variables from YAML with yq
        id: load-vars
        run: |
          echo "github-env-aws-region=$(yq '.github_env.aws.region' .github/config/variables-lambda.yml)" >> $GITHUB_ENV
          echo "terraform-directory=$(yq '.terraform.directory' .github/config/variables-lambda.yml)" >> $GITHUB_ENV
          echo "lambda-runtime=$(yq '.lambda.runtime' .github/config/variables-lambda.yml)" >> $GITHUB_ENV
          
          # Processar lambdas e test-lambdas como JSON
          echo "lambdas=$(yq -o=json '.lambda.lambdas' .github/config/variables-lambda.yml | jq -c '.')" >> $GITHUB_ENV
          echo "test-lambdas=$(yq -o=json '.test.lambdas' .github/config/variables-lambda.yml | jq -c '.')" >> $GITHUB_ENV
          
          echo "test-run-toggle=$(yq '.test.run-toogle' .github/config/variables-lambda.yml)" >> $GITHUB_ENV
          echo "coverage-fail-under=$(yq '.test.coverage.fail_under' .github/config/variables-lambda.yml)" >> $GITHUB_ENV

      - name: Set AWS and GitHub Secrets as Outputs
        id: set-secrets
        run: |
          echo "github-env-aws-access-key=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "github-env-aws-secret-key=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "github-env-github-token-pat=$PAT" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PAT: ${{ secrets.PAT }}

      - name: Validate JSON Outputs
        run: |
          echo "Lambdas Config JSON:"
          echo "$lambdas" | jq .
          echo "Test Lambdas Config JSON:"
          echo "$test-lambdas" | jq .

      - name: Print All Outputs
        run: |
          echo "GitHub AWS Region: $github-env-aws-region"
          echo "GitHub AWS Access Key: $github-env-aws-access-key"
          echo "GitHub AWS Secret Key: $github-env-aws-secret-key"
          echo "GitHub PAT Token: $github-env-github-token-pat"
          echo "Terraform Directory: $terraform-directory"
          echo "Lambda Runtime: $lambda-runtime"
          echo "Lambdas Config: $lambdas"
          echo "Test Run Toggle: $test-run-toggle"
          echo "Test Lambdas Config: $test-lambdas"
          echo "Coverage Fail Under: $coverage-fail-under"

  terraform-validate:
    runs-on: ubuntu-latest
    needs: load-variables

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.terraform-directory }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.terraform-directory }}

  run-tests:
    runs-on: ubuntu-latest
    needs: terraform-validate

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.lambda-runtime }}

      - name: Install Dependencies for All Test Directories
        run: |
          echo "Processing test lambdas configuration:"
          echo "Raw test-lambdas variable:"
          echo "$test-lambdas"

          if [[ -z "$test-lambdas" ]]; then
            echo "Error: test-lambdas variable is empty or not defined."
            exit 1
          fi

          test_lambdas=$(echo "$test-lambdas" | jq -c '.[]')

          for test_lambda in $test_lambdas; do
            name=$(echo $test_lambda | jq -r '.name')
            source=$(echo $test_lambda | jq -r '.source')
            echo "Processing test configuration:"
            echo "Test Name: $name"
            echo "Source Path: $source"

            if [[ -z "$name" || -z "$source" ]]; then
              echo "Error: Invalid test lambda configuration. Name or source is missing."
              exit 1
            fi

            if [ -f "$source/requirements.txt" ]; then
              echo "Installing dependencies from: $source/requirements.txt"
              pip install -r "$source/requirements.txt" || exit 1
            else
              echo "No requirements.txt found for $name in $source"
            fi
          done

      - name: Run All Tests and Generate Coverage Report
        run: |
          coverage run -m unittest discover -s tests
          coverage report -m --fail-under=$coverage-fail-under
          coverage html
          coverage-badge -o coverage.svg -f

      - name: Organize Coverage Reports
        run: |
          mkdir -p tests/reports
          mv htmlcov tests/reports/htmlcov
          mv coverage.svg tests/reports/coverage.svg

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: tests/reports/htmlcov

      - name: Upload Coverage Badge
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: tests/reports/coverage.svg

  sync-develop-to-main:
    runs-on: ubuntu-latest
    needs: [terraform-validate, run-tests]
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Sync develop to main
        run: |
          git fetch origin
          git checkout develop
          git pull origin develop
          git fetch origin ${{ github.event.pull_request.head.ref }}:${{ github.event.pull_request.head.ref }}

      - name: Merge PR to Develop
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git merge --no-ff ${{ github.event.pull_request.head.ref }}
          git push origin develop
        env:
          token: ${{ needs.load-variables.outputs.github-env-github-token-pat }}

      - name: Create or Update Pull Request to Main
        uses: actions/github-script@v6
        with:
          github-token: ${{ needs.load-variables.outputs.github-env-github-token-pat }}
          script: |
            const { data: existingPullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: 'develop',
              base: 'main',
              state: 'open'
            });

            if (existingPullRequests.length > 0) {
              const pullRequest = existingPullRequests[0];
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pullRequest.number,
                title: 'Sync develop to main',
                body: 'This is an automated PR to sync changes from develop to main.'
              });
              console.log(`Updated pull request: ${pullRequest.html_url}`);
            } else {
              const { data: pullRequest } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Sync develop to main',
                head: 'develop',
                base: 'main',
                body: 'This is an automated PR to sync changes from develop to main.',
                draft: false
              });
              console.log(`Created pull request: ${pullRequest.html_url}`);
