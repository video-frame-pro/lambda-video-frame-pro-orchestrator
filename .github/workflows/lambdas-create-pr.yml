name: Validate Terraform, Run Tests, and Create Pull Request

on:
  pull_request:
    branches:
      - develop

jobs:
  load-variables:
    runs-on: ubuntu-latest

    outputs:
      terraform-directory: ${{ steps.load-vars.outputs.terraform-directory }}
      lambda-runtime: ${{ steps.load-vars.outputs.lambda-runtime }}
      lambdas: ${{ steps.load-vars.outputs.lambdas }}
      test-run-toogle: ${{ steps.load-vars.outputs.test-run-toogle }}
      test-source: ${{ steps.load-vars.outputs.test-source }}
      coverage-fail-under: ${{ steps.load-vars.outputs.coverage-fail-under }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Load variables from YAML
        id: load-vars
        run: |
          import yaml
          with open('.github/workflows/variables-lambda.yml', 'r') as file:
              config = yaml.safe_load(file)
          print(f"::set-output name=terraform-directory::{config['terraform']['directory']}")
          print(f"::set-output name=lambda-runtime::{config['lambda']['runtime']}")
          print(f"::set-output name=lambdas::{config['lambda']['lambdas']}")
          print(f"::set-output name=test-run-toogle::{config['test']['run-toogle']}")
          print(f"::set-output name=test-source::{config['test']['lambdas'][0]['source']}")
          print(f"::set-output name=coverage-fail-under::{config['test']['coverage']['fail_under']}")

  terraform-validate:
    runs-on: ubuntu-latest
    needs: load-variables

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ needs.load-variables.outputs.terraform-directory }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ needs.load-variables.outputs.terraform-directory }}

  run-tests:
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: ${{ needs.load-variables.outputs.test-run-toogle == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.load-variables.outputs.lambda-runtime }}

      - name: Install test dependencies
        run: |
          pip install -r ${{ needs.load-variables.outputs.test-source }}/requirements.txt
          pip install coverage coverage-badge

      - name: Run tests with coverage
        run: |
          coverage run -m unittest discover -s ${{ needs.load-variables.outputs.test-source }}
          coverage report -m --fail-under=${{ needs.load-variables.outputs.coverage-fail-under }}
          coverage html
          coverage-badge -o coverage.svg -f

      - name: Organize coverage reports
        run: |
          mkdir -p tests/reports
          mv htmlcov tests/reports/htmlcov
          mv coverage.svg tests/reports/coverage.svg

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: tests/reports/htmlcov

      - name: Upload coverage badge
        uses: actions/upload-artifact@v3
        with:
          name: coverage-badge
          path: tests/reports/coverage.svg

  sync-develop-to-main:
    runs-on: ubuntu-latest
    needs: [terraform-validate, run-tests]
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Sync develop to main
        run: |
          git fetch origin
          git checkout develop
          git pull origin develop
          git fetch origin ${{ github.event.pull_request.head.ref }}:${{ github.event.pull_request.head.ref }}

      - name: Merge PR to Develop
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git merge --no-ff ${{ github.event.pull_request.head.ref }}
          git push origin develop
        env:
          token: ${{ secrets.PAT }}

      - name: Create or Update Pull Request to Main
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const { data: existingPullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: 'develop',
              base: 'main',
              state: 'open'
            });

            if (existingPullRequests.length > 0) {
              const pullRequest = existingPullRequests[0];
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pullRequest.number,
                title: 'Sync develop to main',
                body: 'This is an automated PR to sync changes from develop to main.'
              });
              console.log(`Updated pull request: ${pullRequest.html_url}`);
            } else {
              const { data: pullRequest } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Sync develop to main',
                head: 'develop',
                base: 'main',
                body: 'This is an automated PR to sync changes from develop to main.',
                draft: false
              });
              console.log(`Created pull request: ${pullRequest.html_url}`);
            }
