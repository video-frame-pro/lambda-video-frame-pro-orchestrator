name: Validate Terraform, Run Tests, and Create Pull Request

on:
  pull_request:
    branches:
      - develop
    paths:
      - 'src/**'
      - 'tests/**'
      - 'infra/**'
      - '.github/config/variables-lambda.yml'
      - '.github/workflows/lambdas-create-pr.yml'
      - '.github/workflows/lambdas-deploy.yml'

jobs:
  load-variables:
    runs-on: ubuntu-latest

    outputs:
      github-env-aws-region: ${{ steps.load-vars.outputs.github-env-aws-region }}
      github-env-aws-access-key: ${{ steps.set-secrets.outputs.github-env-aws-access-key }}
      github-env-aws-secret-key: ${{ steps.set-secrets.outputs.github-env-aws-secret-key }}
      github-env-github-token-pat: ${{ steps.set-secrets.outputs.github-env-github-token-pat }}
      terraform-directory: ${{ steps.load-vars.outputs.terraform-directory }}
      lambda-runtime: ${{ steps.load-vars.outputs.lambda-runtime }}
      lambdas: ${{ steps.load-vars.outputs.lambdas }}
      test-run-toggle: ${{ steps.load-vars.outputs.test-run-toggle }}
      test-lambdas: ${{ steps.load-vars.outputs.test-lambdas }}
      coverage-fail-under: ${{ steps.load-vars.outputs.coverage-fail-under }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Load variables from YAML with yq
        id: load-vars
        run: |
          echo "::set-output name=github-env-aws-region::$(yq '.github_env.aws.region' .github/config/variables-lambda.yml)"
          echo "::set-output name=terraform-directory::$(yq '.terraform.directory' .github/config/variables-lambda.yml)"
          echo "::set-output name=lambda-runtime::$(yq '.lambda.runtime' .github/config/variables-lambda.yml)"

          # Processar `lambdas` como JSON e remover quebras de linha
          lambdas=$(yq -o=json '.lambda.lambdas' .github/config/variables-lambda.yml | jq -c '.')
          echo "::set-output name=lambdas::$lambdas"

          # Processar `test-lambdas` como JSON e remover quebras de linha
          test_lambdas=$(yq -o=json '.test.lambdas' .github/config/variables-lambda.yml | jq -c '.')
          echo "::set-output name=test-lambdas::$test_lambdas"

          # Outros parâmetros
          echo "::set-output name=test-run-toggle::$(yq '.test.run-toogle' .github/config/variables-lambda.yml)"
          echo "::set-output name=coverage-fail-under::$(yq '.test.coverage.fail_under' .github/config/variables-lambda.yml)"

      - name: Set AWS and GitHub Secrets as Outputs
        id: set-secrets
        run: |
          echo "::set-output name=github-env-aws-access-key::$AWS_ACCESS_KEY_ID"
          echo "::set-output name=github-env-aws-secret-key::$AWS_SECRET_ACCESS_KEY"
          echo "::set-output name=github-env-github-token-pat::$PAT"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PAT: ${{ secrets.PAT }}

  check-variables:
    runs-on: ubuntu-latest
    needs: load-variables

    steps:
      - name: Validate JSON Outputs
        run: |
          echo "Checking Lambdas Config JSON..."
          if [[ -z "$LAMBDAS" ]]; then
            echo "Error: LAMBDAS variable is empty or not defined."
            exit 1
          fi
          echo "Lambdas Config JSON:"
          echo "$LAMBDAS" | jq .

          echo "Checking Test Lambdas Config JSON..."
          if [[ -z "$TEST_LAMBDAS" ]]; then
            echo "Error: TEST_LAMBDAS variable is empty or not defined."
            exit 1
          fi
          echo "Test Lambdas Config JSON:"
          echo "$TEST_LAMBDAS" | jq .
        env:
          LAMBDAS: ${{ needs.load-variables.outputs.lambdas }}
          TEST_LAMBDAS: ${{ needs.load-variables.outputs.test-lambdas }}

      - name: Print All Outputs
        run: |
          echo "GitHub AWS Region: $GITHUB_AWS_REGION"
          echo "GitHub AWS Access Key: $GITHUB_AWS_ACCESS_KEY"
          echo "GitHub AWS Secret Key: $GITHUB_AWS_SECRET_KEY"
          echo "GitHub PAT Token: $GITHUB_PAT_TOKEN"
          echo "Terraform Directory: $TERRAFORM_DIRECTORY"
          echo "Lambda Runtime: $LAMBDA_RUNTIME"
          echo "Lambdas Config: $LAMBDAS"
          echo "Test Run Toggle: $TEST_RUN_TOGGLE"
          echo "Test Lambdas Config: $TEST_LAMBDAS"
          echo "Coverage Fail Under: $COVERAGE_FAIL_UNDER"
        env:
          GITHUB_AWS_REGION: ${{ needs.load-variables.outputs.github-env-aws-region }}
          GITHUB_AWS_ACCESS_KEY: ${{ needs.load-variables.outputs.github-env-aws-access-key }}
          GITHUB_AWS_SECRET_KEY: ${{ needs.load-variables.outputs.github-env-aws-secret-key }}
          GITHUB_PAT_TOKEN: ${{ needs.load-variables.outputs.github-env-github-token-pat }}
          TERRAFORM_DIRECTORY: ${{ needs.load-variables.outputs.terraform-directory }}
          LAMBDA_RUNTIME: ${{ needs.load-variables.outputs.lambda-runtime }}
          LAMBDAS: ${{ needs.load-variables.outputs.lambdas }}
          TEST_RUN_TOGGLE: ${{ needs.load-variables.outputs.test-run-toggle }}
          TEST_LAMBDAS: ${{ needs.load-variables.outputs.test-lambdas }}
          COVERAGE_FAIL_UNDER: ${{ needs.load-variables.outputs.coverage-fail-under }}

  terraform-validate:
    runs-on: ubuntu-latest
    needs: load-variables

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: |
          cd $TERRAFORM_DIRECTORY
          terraform init
        env:
          TERRAFORM_DIRECTORY: ${{ needs.load-variables.outputs.terraform-directory }}

      - name: Terraform Validate
        run: |
          cd $TERRAFORM_DIRECTORY
          terraform validate
        env:
          TERRAFORM_DIRECTORY: ${{ needs.load-variables.outputs.terraform-directory }}

  run-tests:
    runs-on: ubuntu-latest
    needs: terraform-validate

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: $LAMBDA_RUNTIME
        env:
          LAMBDA_RUNTIME: ${{ needs.load-variables.outputs.lambda-runtime }}

      - name: Install Dependencies for All Test Directories
        run: |
          echo "Processing test lambdas configuration:"
          echo "Raw TEST_LAMBDAS variable:"
          echo "$TEST_LAMBDAS"
          
          # Validar se a variável não está vazia
          if [[ -z "$TEST_LAMBDAS" ]]; then
            echo "Error: TEST_LAMBDAS variable is empty or not defined."
            exit 1
          fi
          
          # Iterar sobre cada lambda
          TEST_LAMBDAS=$(echo "$TEST_LAMBDAS" | jq -c '.[]')
          for test_lambda in "$TEST_LAMBDAS"; do
            name=$(echo $test_lambda | jq -r '.name')
            source=$(echo $test_lambda | jq -r '.source')
          
            # Validar configuração
            if [[ -z "$name" || -z "$source" ]]; then
              echo "Error: Invalid test lambda configuration. Name or source is missing."
              exit 1
            fi
          
            # Instalar dependências, se o arquivo requirements.txt existir
            if [ -f "$source/requirements.txt" ]; then
              echo "Installing dependencies for $name from $source/requirements.txt"
              pip install -r "$source/requirements.txt"
            else
              echo "No requirements.txt found for $name in $source"
            fi
          done
        env:
          TEST_LAMBDAS: ${{ needs.load-variables.outputs.test-lambdas }}

      - name: Run All Tests and Generate Coverage Report
        run: |
          coverage run -m unittest discover -s tests
          coverage report -m --fail-under=$COVERAGE_FAIL_UNDER
        env:
          COVERAGE_FAIL_UNDER: ${{ needs.load-variables.outputs.coverage-fail-under }}

  sync-develop-to-main:
    runs-on: ubuntu-latest
    needs: [terraform-validate, run-tests]
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Sync develop to main
        run: |
          git fetch origin
          git checkout develop
          git pull origin develop
          git fetch origin ${{ github.event.pull_request.head.ref }}:${{ github.event.pull_request.head.ref }}
          git merge --no-ff ${{ github.event.pull_request.head.ref }}
          git push origin develop
        env:
          GITHUB_PAT_TOKEN: ${{ needs.load-variables.outputs.github-env-github-token-pat }}

      - name: Create or Update Pull Request to Main
        uses: actions/github-script@v6
        with:
          github-token: ${{ needs.load-variables.outputs.github-env-github-token-pat }}
          script: |
            const { data: existingPullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: 'develop',
              base: 'main',
              state: 'open'
            });

            if (existingPullRequests.length > 0) {
              const pullRequest = existingPullRequests[0];
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pullRequest.number,
                title: 'Sync develop to main',
                body: 'This is an automated PR to sync changes from develop to main.'
              });
            } else {
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Sync develop to main',
                head: 'develop',
                base: 'main',
                body: 'This is an automated PR to sync changes from develop to main.',
                draft: false
              });
              console.log(`Created pull request: ${pullRequest.html_url}`);
            }