name: Validate Terraform, Run Tests, and Create Pull Request

on:
  pull_request:
    branches:
      - develop
    paths:
      - 'src/**'
      - 'tests/**'
      - 'infra/**'
      - '.github/config/variables-lambda.yml'
      - '.github/workflows/lambdas-create-pr.yml'
      - '.github/workflows/lambdas-deploy.yml'

jobs:
  load-variables:
    runs-on: ubuntu-latest

    outputs:
      terraform-directory: ${{ steps.load-vars.outputs.terraform-directory }}
      lambda-runtime: ${{ steps.load-vars.outputs.lambda-runtime }}
      lambdas: ${{ steps.load-vars.outputs.lambdas }}
      test-run-toggle: ${{ steps.load-vars.outputs.test-run-toggle }}
      test-lambdas: ${{ steps.load-vars.outputs.test-lambdas }}
      coverage-fail-under: ${{ steps.load-vars.outputs.coverage-fail-under }}
      aws-region: ${{ steps.load-vars.outputs.aws-region }}
      aws-access-key: ${{ steps.load-vars.outputs.aws-access-key }}
      aws-secret-key: ${{ steps.load-vars.outputs.aws-secret-key }}
      github-pat: ${{ steps.load-vars.outputs.github-pat }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Load variables from YAML with yq
        id: load-vars
        run: |
          echo "::set-output name=terraform-directory::$(yq '.terraform.directory' .github/config/variables-lambda.yml)"
          echo "::set-output name=lambda-runtime::$(yq '.lambda.runtime' .github/config/variables-lambda.yml)"
          echo "::set-output name=lambdas::$(yq -o=json '.lambda.lambdas' .github/config/variables-lambda.yml)"
          echo "::set-output name=test-run-toggle::$(yq '.test.run-toogle' .github/config/variables-lambda.yml)"
          echo "::set-output name=test-lambdas::$(yq -o=json '.test.lambdas' .github/config/variables-lambda.yml)"
          echo "::set-output name=coverage-fail-under::$(yq '.test.coverage.fail_under' .github/config/variables-lambda.yml)"
          echo "::set-output name=aws-region::$(yq '.github_env.aws.region' .github/config/variables-lambda.yml)"
          echo "::set-output name=aws-access-key::$(yq '.github_env.aws.access_key' .github/config/variables-lambda.yml)"
          echo "::set-output name=aws-secret-key::$(yq '.github_env.aws.secret_key' .github/config/variables-lambda.yml)"
          echo "::set-output name=github-pat::$(yq '.github_env.github_token.pat' .github/config/variables-lambda.yml)"

  terraform-validate:
    runs-on: ubuntu-latest
    needs: load-variables

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ needs.load-variables.outputs.terraform-directory }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ needs.load-variables.outputs.terraform-directory }}

  run-tests:
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: ${{ needs.load-variables.outputs.test-run-toggle == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.load-variables.outputs.lambda-runtime }}

      - name: Install Dependencies for All Test Directories
        run: |
          test_lambdas=$(echo '${{ needs.load-variables.outputs.test-lambdas }}' | jq -c '.[]')
          for test_lambda in $test_lambdas; do
            source=$(echo $test_lambda | jq -r '.source')
            echo "Installing dependencies for: $source"
            if [ -f "$source/requirements.txt" ]; then
              pip install -r "$source/requirements.txt"
            else
              echo "No requirements.txt found in $source"
            fi
          done

      - name: Run All Tests and Generate Coverage Report
        run: |
          coverage run -m unittest discover -s tests
          coverage report -m --fail-under=${{ needs.load-variables.outputs.coverage-fail-under }}
          coverage html
          coverage-badge -o coverage.svg -f

      - name: Organize coverage reports
        run: |
          mkdir -p tests/reports
          mv htmlcov tests/reports/htmlcov
          mv coverage.svg tests/reports/coverage.svg

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: tests/reports/htmlcov

      - name: Upload coverage badge
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: tests/reports/coverage.svg
