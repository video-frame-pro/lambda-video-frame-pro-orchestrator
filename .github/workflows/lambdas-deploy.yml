name: Lambda Deploy Workflow

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - 'infra/**'
      - '.github/config/variables-lambda.yml'
      - '.github/workflows/lambdas-deploy.yml'

jobs:
  load-variables:
    runs-on: ubuntu-latest

    outputs:
      github-env-aws-region: ${{ steps.load-vars.outputs.github-env-aws-region }}
      github-env-aws-access-key: ${{ steps.load-vars.outputs.github-env-aws-access-key }}
      github-env-aws-secret-key: ${{ steps.load-vars.outputs.github-env-aws-secret-key }}
      terraform-directory: ${{ steps.load-vars.outputs.terraform-directory }}
      lambda-runtime: ${{ steps.load-vars.outputs.lambda-runtime }}
      lambdas: ${{ steps.load-vars.outputs.lambdas }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Load variables from YAML with yq
        id: load-vars
        run: |
          echo "::set-output name=github-env-aws-region::$(yq '.github_env.aws.region' .github/config/variables-lambda.yml)"
          echo "::set-output name=github-env-aws-access-key::$(yq '.github_env.aws.access_key' .github/config/variables-lambda.yml)"
          echo "::set-output name=github-env-aws-secret-key::$(yq '.github_env.aws.secret_key' .github/config/variables-lambda.yml)"
          echo "::set-output name=terraform-directory::$(yq '.terraform.directory' .github/config/variables-lambda.yml)"
          echo "::set-output name=lambda-runtime::$(yq '.lambda.runtime' .github/config/variables-lambda.yml)"
          echo "::set-output name=lambdas::$(yq -o=json '.lambda.lambdas' .github/config/variables-lambda.yml)"

  terraform-validate:
    runs-on: ubuntu-latest
    needs: load-variables

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ needs.load-variables.outputs.terraform-directory }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ needs.load-variables.outputs.terraform-directory }}

  package-lambdas:
    runs-on: ubuntu-latest
    needs: terraform-validate

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Package Lambdas
        run: |
          lambdas=$(echo '${{ needs.load-variables.outputs.lambdas }}' | jq -c '.[]')
          for lambda in $lambdas; do
            name=$(echo $lambda | jq -r '.name')
            source=$(echo $lambda | jq -r '.source')
            zip=$(echo $lambda | jq -r '.zip')
            echo "Packaging Lambda: $name"
          
            # Instalar dependÃªncias apenas se o arquivo requirements.txt existir
            if [ -f "$source/requirements.txt" ]; then
              python3 -m venv venv
              source venv/bin/activate
              pip install -r "$source/requirements.txt"
              deactivate
            else
              echo "No requirements.txt found for $name in $source"
            fi
          
            # Criar o pacote ZIP
            mkdir -p "$(dirname $zip)"
            cp -r "$source/"* "$(dirname $zip)/"
            cd "$(dirname $zip)"
            zip -r "$(basename $zip)" .
            cd ../../
          done

  terraform-deploy:
    runs-on: ubuntu-latest
    needs: package-lambdas

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ needs.load-variables.outputs.github-env-aws-access-key }}
          aws-secret-access-key: ${{ needs.load-variables.outputs.github-env-aws-secret-key }}
          aws-region: ${{ needs.load-variables.outputs.github-env-aws-region }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ needs.load-variables.outputs.terraform-directory }}
