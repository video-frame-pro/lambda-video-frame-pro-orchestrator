name: Lambda Deploy Workflow

on:
  push:
    branches:
      - main

jobs:
  load-variables:
    runs-on: ubuntu-latest

    outputs:
      terraform-directory: ${{ steps.load-vars.outputs.terraform-directory }}
      lambda-runtime: ${{ steps.load-vars.outputs.lambda-runtime }}
      lambdas: ${{ steps.load-vars.outputs.lambda-lambdas }}
      aws-region: ${{ steps.load-vars.outputs.github-env-aws-region }}
      aws-access-key: ${{ steps.load-vars.outputs.github-env-aws-access-key }}
      aws-secret-key: ${{ steps.load-vars.outputs.github-env-aws-secret-key }}

    steps:
      # Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # Carregar variáveis compartilhadas
      - name: Load shared variables
        id: load-vars
        uses: mrlocofy/read-yaml-action@v1.1
        with:
          yamlFile: .github/workflows/variables-lambda.yml

  terraform-validate:
    runs-on: ubuntu-latest
    needs: load-variables

    steps:
      # Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # Configurar o Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      # Inicializar o Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ needs.load-variables.outputs.terraform-directory }}

      # Validar o Terraform
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ needs.load-variables.outputs.terraform-directory }}

  package-lambdas:
    runs-on: ubuntu-latest
    needs: terraform-validate  # Só empacota após a validação do Terraform

    steps:
      # Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # Empacotar Lambdas
      - name: Package Lambdas
        run: |
          lambdas='${{ needs.load-variables.outputs.lambdas }}'
          echo "Packaging lambdas: $lambdas"
          for lambda in $(echo $lambdas | jq -c '.[]'); do
            name=$(echo $lambda | jq -r '.name')
            source=$(echo $lambda | jq -r '.source')
            zip=$(echo $lambda | jq -r '.zip')
            echo "Preparing Lambda: $name"
            if [ -f "$source/requirements.txt" ]; then
              python3 -m venv venv
              source venv/bin/activate
              pip install -r "$source/requirements.txt"
              deactivate
            fi
            mkdir -p "$(dirname $zip)"
            cp -r "$source/"* "$(dirname $zip)/"
            cd "$(dirname $zip)"
            zip -r "$(basename $zip)" .
            cd ../../
          done

  terraform-deploy:
    runs-on: ubuntu-latest
    needs: package-lambdas  # Só faz o deploy após o empacotamento das Lambdas

    steps:
      # Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # Configurar credenciais da AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ needs.load-variables.outputs.aws-access-key }}
          aws-secret-access-key: ${{ needs.load-variables.outputs.aws-secret-key }}
          aws-region: ${{ needs.load-variables.outputs.aws-region }}

      # Aplicar Terraform
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ needs.load-variables.outputs.terraform-directory }}
